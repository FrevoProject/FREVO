group Java;

program(globals,functions) ::= <<
class Wrapper {
    <globals; separator="\n">
    <functions; separator="\n">
}
>>

variable(type,name) ::= "<type> <name>;"

variableInit(type,name,value) ::= "<type> <name> = <value>;"

arrayDeclaration(type,name,size) ::= "<type>[] <name> = new <type>[<size>];"

array(name,index) ::= "<name>[<index>]"

arrayexp(index) ::= "[<index>]"

cast(type) ::= "(<type>)"

castvalue(type,value) ::= "(<type>)<value>"

dummy() ::= "dummy"

globalVariable ::= variable

globalVariableInit ::= variableInit

globalArrayDeclaration ::= arrayDeclaration

function(type,name,args,locals,stats) ::= <<
<type> <name>(<args; separator=", ">) {
    <locals; separator="\n">
    <stats; separator="\n">
}
>>

type_int() ::= "int"

type_char() ::= "char"

type_float() ::= "float"

type_double() ::= "double"

type_intarray() ::= "int[]"

type_chararray() ::= "char[]"

type_floatarray() ::= "float[]"

type_doublearray() ::= "double[]"

type_user_object(name) ::= "<name>"

parameter(type,name) ::= "<type> <name>"

arrayparameter(type,name) ::= "<type>[] <name>"

statement(expr) ::= "<expr>;"

brackets(expr) ::= "(<expr>)"

return(expr) ::= "return <expr>;"

statementList(locals,stats) ::= <<
{
    <locals; separator="\n">
    <stats; separator="\n">
}<\n>
>>

forLoop(e1,e2,e3,locals,stats) ::= <<
for (<e1> <e2>; <e3>) {
    <locals; separator="\n">
    <stats; separator="\n">
}
>>

ifBlock(e,locals,stats) ::= <<
if (<e>) {
    <locals; separator="\n">
    <stats; separator="\n">
}
>>

inkrement(e) ::= "<e>++"

dekrement(e) ::= "<e>--"

inkrementby(lhs,rhs) ::= "<lhs> += <rhs>;"

dekrementby(lhs,rhs) ::= "<lhs> -= <rhs>;"

assign(lhs,rhs) ::= "<lhs> = <rhs>;"

conjunction(left,right) ::= "<left> && <right>"

disjunction(left,right) ::= "<left> || <right>"

equals(left,right) ::= "<left> == <right>"

lessThan(left,right) ::= "<left> \< <right>"

moreThan(left,right) ::= "<left> \> <right>"

lessOrEqual(left,right) ::= "<left> \<= <right>"

moreOrEqual(left,right) ::= "<left> \>= <right>"

unEqual(left,right) ::= "<left> != <right>"

add(left,right) ::= "<left> + <right>"

substract(left,right) ::= "<left> - <right>"

multiply(left,right) ::= "<left> * <right>"

divide(left,right) ::= "<left> / <right>"

refVar(id) ::= "<id>"

iconst(value) ::= "<value>"
